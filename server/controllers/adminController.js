const Entreprise = require('../models/Entreprise');
const User = require('../models/User');
const KPI = require('../models/KPI');
const AuditLog = require('../models/AuditLog');

exports.obtenirDashboardAdmin = async (req, res) => {
  try {
    const { periode = 'mois' } = req.query;

    // Calculer les dates selon la période
    const maintenant = new Date();
    let dateDebut = new Date();

    switch (periode) {
      case 'jour':
        dateDebut.setHours(0, 0, 0, 0);
        break;
      case 'semaine':
        dateDebut.setDate(maintenant.getDate() - 7);
        break;
      case 'mois':
        dateDebut.setMonth(maintenant.getMonth() - 1);
        break;
      case 'trimestre':
        dateDebut.setMonth(maintenant.getMonth() - 3);
        break;
      case 'annee':
        dateDebut.setFullYear(maintenant.getFullYear() - 1);
        break;
    }

    // Statistiques des entreprises
    const totalEntreprises = await Entreprise.countDocuments();
    const entreprisesActives = await Entreprise.countDocuments({ statut: 'Actif' });
    const entreprisesInactives = await Entreprise.countDocuments({ statut: 'Inactif' });
    const entreprisesEnAttente = await Entreprise.countDocuments({ statut: 'En attente' });

    // Statistiques des utilisateurs
    const totalUsers = await User.countDocuments();
    const usersActifs = await User.countDocuments({ statut: 'actif' });
    const usersInactifs = await User.countDocuments({ statut: 'inactif' });

    // Statistiques des KPIs
    const totalKPIs = await KPI.countDocuments();
    const kpisActifs = await KPI.countDocuments({ statut: 'actif' });

    // Entreprises récemment créées
    const entreprisesRecentes = await Entreprise.find({
      dateCreation: { $gte: dateDebut }
    })
    .sort({ dateCreation: -1 })
    .limit(5)
    .select('nom secteur dateCreation statut');

    // Utilisateurs récemment connectés
    const usersRecents = await User.find({
      derniereConnexion: { $gte: dateDebut }
    })
    .sort({ derniereConnexion: -1 })
    .limit(5)
    .select('nom prenom derniereConnexion role')
    .populate('entrepriseId', 'nom');

    // Répartition par secteur
    const repartitionSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]);

    // Répartition par statut
    const repartitionStatuts = await Entreprise.aggregate([
      {
        $group: {
          _id: '$statut',
          count: { $sum: 1 }
        }
      }
    ]);

    // Investissements totaux
    const investissementsTotaux = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: '$investissementsRealises' },
          moyenne: { $avg: '$investissementsRealises' }
        }
      }
    ]);

    // Emplois créés
    const emploisCrees = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: '$emploisCrees' },
          moyenne: { $avg: '$emploisCrees' }
        }
      }
    ]);

    const dashboard = {
      periode,
      entreprises: {
        total: totalEntreprises,
        actives: entreprisesActives,
        inactives: entreprisesInactives,
        enAttente: entreprisesEnAttente,
        recentes: entreprisesRecentes
      },
      utilisateurs: {
        total: totalUsers,
        actifs: usersActifs,
        inactifs: usersInactifs,
        recents: usersRecents
      },
      kpis: {
        total: totalKPIs,
        actifs: kpisActifs
      },
      repartition: {
        secteurs: repartitionSecteurs,
        statuts: repartitionStatuts
      },
      economie: {
        investissements: investissementsTotaux[0] || { total: 0, moyenne: 0 },
        emplois: emploisCrees[0] || { total: 0, moyenne: 0 }
      }
    };

    res.status(200).json({
      success: true,
      data: dashboard
    });
  } catch (error) {
    console.error('Erreur lors de la récupération du dashboard admin:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération du dashboard admin.'
    });
  }
};

exports.obtenirRapportsAdmin = async (req, res) => {
  try {
    const { type, dateDebut, dateFin } = req.query;

    let query = {};
    if (dateDebut && dateFin) {
      query.dateCreation = {
        $gte: new Date(dateDebut),
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    const totalKPIs = await KPI.countDocuments();

      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
        moyenneInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      },
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
    const topSecteurs = await Entreprise.aggregate([
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    res.status(200).json({
      success: true,
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      topSecteurs,
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: statistiques
    });
        totalEmplois: 0,
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    ]);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    ]);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      success: false,
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
      {
          emplois: { $sum: '$emploisCrees' }
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(200).json({
      success: true,
      data: statistiques
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      data: stats
    });
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
      data: stats
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
        $sort: { count: -1 }
      },
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      success: false,
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
  }
          count: { $sum: 1 }
    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
          totalEmplois: { $sum: '$emploisCrees' },
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      success: true,
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        $group: {
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
    res.status(200).json({
      success: true,
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      data: stats

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
      },

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
    res.status(200).json({
      success: true,
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      data: stats

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
      },

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
  }
          count: { $sum: 1 }
    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
          totalEmplois: { $sum: '$emploisCrees' },
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
      data: stats
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
        $sort: { count: -1 }
      },
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      success: false,
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(200).json({
      success: true,
      data: statistiques
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    ]);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    ]);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      success: false,
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
    };
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    }
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
    let rapport = {};
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    // Statistiques de base
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    if (entreprisesInactives.length > 0) {
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });
    // Investissements et emplois totaux
    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      {
      data: stats
      economie: economie[0] || {
        totalInvestissements: 0,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
      topSecteurs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },

    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      entreprises: entrepriseUsers,
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };
    res.status(200).json({
    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      data: stats
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalEntreprises,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    // Évolution mensuelle des entreprises
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
      total: totalKPIs,
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      total: 0,
      data: stats
    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
      success: false,
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
    });
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }


    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      success: true,
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      query.dateCreation = {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    if (entreprisesInactives.length > 0) {
    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
    // Évolution mensuelle des entreprises
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
          { $match: query },
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
      query.dateCreation = {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
        $lte: new Date(dateFin)
      };
    }

    let rapport = {};

    switch (type) {
      case 'entreprises':
        rapport = await Entreprise.aggregate([
          { $match: query },
          {
            $group: {
              _id: {
                secteur: '$secteur',
                statut: '$statut'
              },
              count: { $sum: 1 },
              investissements: { $sum: '$investissementsRealises' },
              emplois: { $sum: '$emploisCrees' }
            }
          },
          {
            $group: {
              _id: '$_id.secteur',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  investissements: '$investissements',
                  emplois: '$emplois'
                }
              },
              totalCount: { $sum: '$count' },
              totalInvestissements: { $sum: '$investissements' },
              totalEmplois: { $sum: '$emplois' }
            }
          }
        ]);
        break;

      case 'utilisateurs':
        rapport = await User.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: {
              path: '$entreprise',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $group: {
              _id: {
                role: '$role',
                statut: '$statut'
              },
              count: { $sum: 1 }
            }
          },
          {
            $group: {
              _id: '$_id.role',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count'
                }
              },
              totalCount: { $sum: '$count' }
            }
          }
        ]);
        break;

      case 'kpis':
        rapport = await KPI.aggregate([
          {
            $lookup: {
              from: 'entreprises',
              localField: 'entrepriseId',
              foreignField: '_id',
              as: 'entreprise'
            }
          },
          {
            $unwind: '$entreprise'
          },
          {
            $group: {
              _id: {
                categorie: '$categorie',
                statut: '$statut'
              },
              count: { $sum: 1 },
              moyenneValeur: { $avg: '$valeurActuelle' }
            }
          },
          {
            $group: {
              _id: '$_id.categorie',
              statuts: {
                $push: {
                  statut: '$_id.statut',
                  count: '$count',
                  moyenneValeur: '$moyenneValeur'
                }
              },
              totalCount: { $sum: '$count' },
              moyenneValeurGlobale: { $avg: '$moyenneValeur' }
            }
          }
        ]);
        break;

      default:
        return res.status(400).json({
          success: false,
          message: 'Type de rapport invalide.'
        });
    }

    res.status(200).json({
      success: true,
      type,
      periode: { dateDebut, dateFin },
      data: rapport
    });
  } catch (error) {
    console.error('Erreur lors de la génération du rapport:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la génération du rapport.'
    });
  }
};

exports.obtenirAlertesAdmin = async (req, res) => {
  try {
    const alertes = [];

    // Entreprises inactives depuis plus de 30 jours
    const trenteJoursAgo = new Date();
    trenteJoursAgo.setDate(trenteJoursAgo.getDate() - 30);

    const entreprisesInactives = await Entreprise.find({
      statut: 'Inactif',
      updatedAt: { $lt: trenteJoursAgo }
    }).select('nom secteur dateCreation');

    if (entreprisesInactives.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises inactives',
        message: `${entreprisesInactives.length} entreprise(s) inactive(s) depuis plus de 30 jours`,
        details: entreprisesInactives
      });
    }

    // KPIs en alerte critique
    const kpisCritiques = await KPI.find({
      'alertes.type': 'critique',
      'alertes.lue': false
    })
    .populate('entrepriseId', 'nom secteur')
    .limit(10);

    if (kpisCritiques.length > 0) {
      alertes.push({
        type: 'error',
        titre: 'KPIs en alerte critique',
        message: `${kpisCritiques.length} KPI(s) en alerte critique`,
        details: kpisCritiques
      });
    }

    // Utilisateurs non connectés depuis plus de 7 jours
    const septJoursAgo = new Date();
    septJoursAgo.setDate(septJoursAgo.getDate() - 7);

    const usersInactifs = await User.find({
      derniereConnexion: { $lt: septJoursAgo },
      statut: 'actif'
    })
    .select('nom prenom derniereConnexion email')
    .populate('entrepriseId', 'nom')
    .limit(10);

    if (usersInactifs.length > 0) {
      alertes.push({
        type: 'info',
        titre: 'Utilisateurs inactifs',
        message: `${usersInactifs.length} utilisateur(s) non connecté(s) depuis plus de 7 jours`,
        details: usersInactifs
      });
    }

    // Entreprises sans documents
    const entreprisesSansDocuments = await Entreprise.find({
      'documents.0': { $exists: false }
    }).select('nom secteur dateCreation');

    if (entreprisesSansDocuments.length > 0) {
      alertes.push({
        type: 'warning',
        titre: 'Entreprises sans documents',
        message: `${entreprisesSansDocuments.length} entreprise(s) sans documents`,
        details: entreprisesSansDocuments
      });
    }

    res.status(200).json({
      success: true,
      count: alertes.length,
      data: alertes
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des alertes.'
    });
  }
};

exports.obtenirStatistiquesGlobales = async (req, res) => {
  try {
    // Statistiques de base
    const totalEntreprises = await Entreprise.countDocuments();
    const totalUsers = await User.countDocuments();
    const totalKPIs = await KPI.countDocuments();

    // Investissements et emplois totaux
    const economie = await Entreprise.aggregate([
      {
        $group: {
          _id: null,
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
          moyenneEmplois: { $avg: '$emploisCrees' }
        }
      }
    ]);

    // Évolution mensuelle des entreprises
    const evolutionMensuelle = await Entreprise.aggregate([
      {
        $group: {
          _id: {
            annee: { $year: '$dateCreation' },
            mois: { $month: '$dateCreation' }
          },
          count: { $sum: 1 }
        }
      },
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
          totalInvestissements: { $sum: '$investissementsRealises' },
          totalEmplois: { $sum: '$emploisCrees' },
          moyenneInvestissements: { $avg: '$investissementsRealises' },
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.annee': 1, '_id.mois': 1 }
      },
      {
        $limit: 12
      }
    ]);

    // Top 5 des secteurs
    const topSecteurs = await Entreprise.aggregate([
      {
        $group: {
          _id: '$secteur',
          count: { $sum: 1 },
          investissements: { $sum: '$investissementsRealises' },
          emplois: { $sum: '$emploisCrees' }
        }
      },
      {
        $sort: { count: -1 }
      },
      {
        $limit: 5
      }
    ]);

    // Performance des KPIs
    const performanceKPIs = await KPI.aggregate([
      {
        $group: {
          _id: '$categorie',
          count: { $sum: 1 },
          moyenneValeur: { $avg: '$valeurActuelle' },
          moyenneCible: { $avg: '$valeurCible' }
        }
      }
    ]);

    const statistiques = {
      general: {
        entreprises: totalEntreprises,
        utilisateurs: totalUsers,
        kpis: totalKPIs
      },
      economie: economie[0] || {
        totalInvestissements: 0,
        totalEmplois: 0,
        moyenneInvestissements: 0,
        moyenneEmplois: 0
      },
      evolution: evolutionMensuelle,
      topSecteurs,
      performanceKPIs
    };

    res.status(200).json({
      success: true,
      data: statistiques
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques globales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques globales.'
    });
  }
};

exports.obtenirStatistiquesUtilisateurs = async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const activeUsers = await User.countDocuments({ isActive: true });
    const adminUsers = await User.countDocuments({ role: 'admin' });
    const entrepriseUsers = await User.countDocuments({ typeCompte: 'entreprise' });

    const stats = {
      total: totalUsers,
      actifs: activeUsers,
      admins: adminUsers,
      entreprises: entrepriseUsers,
      pourcentageActifs: totalUsers > 0 ? Math.round((activeUsers / totalUsers) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques utilisateurs.'
    });
  }
};

exports.obtenirStatistiquesEntreprises = async (req, res) => {
  try {
    const totalEntreprises = await Entreprise.countDocuments();
    const activeEntreprises = await Entreprise.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalEntreprises,
      actives: activeEntreprises,
      pourcentageActives: totalEntreprises > 0 ? Math.round((activeEntreprises / totalEntreprises) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques entreprises:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques entreprises.'
    });
  }
};

exports.obtenirStatistiquesKPIs = async (req, res) => {
  try {
    const totalKPIs = await KPI.countDocuments();
    const activeKPIs = await KPI.countDocuments({ statut: 'actif' });

    const stats = {
      total: totalKPIs,
      actifs: activeKPIs,
      pourcentageActifs: totalKPIs > 0 ? Math.round((activeKPIs / totalKPIs) * 100) : 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques KPIs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques KPIs.'
    });
  }
};

exports.obtenirStatistiquesRevenus = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      total: 0,
      mensuel: 0,
      annuel: 0,
      evolution: 0
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques revenus:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques revenus.'
    });
  }
};

exports.obtenirStatistiquesActivite = async (req, res) => {
  try {
    // Pour l'instant, retourner des données fictives
    const stats = {
      connexionsAujourdhui: 0,
      connexionsCetteSemaine: 0,
      connexionsCeMois: 0,
      activiteRecente: []
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des statistiques activité:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la récupération des statistiques activité.'
    });
  }
};

exports.obtenirAuditLogs = async (req, res) => {
  try {
    const { page = 0, limit = 10 } = req.query;
    const skip = page * limit;

    const logs = await AuditLog.find()
      .sort({ timestamp: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .populate('userId', 'nom prenom');

    res.json({ logs });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
